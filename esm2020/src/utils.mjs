import * as Actions from './actions';
export function difference(first, second) {
    return first.filter((item) => second.indexOf(item) < 0);
}
/**
 * Provides an app's view into the state of the lifted store.
 */
export function unliftState(liftedState) {
    const { computedStates, currentStateIndex } = liftedState;
    // At start up NgRx dispatches init actions,
    // When these init actions are being filtered out by the predicate or safe/block list options
    // we don't have a complete computed states yet.
    // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state
    if (currentStateIndex >= computedStates.length) {
        const { state } = computedStates[computedStates.length - 1];
        return state;
    }
    const { state } = computedStates[currentStateIndex];
    return state;
}
export function unliftAction(liftedState) {
    return liftedState.actionsById[liftedState.nextActionId - 1];
}
/**
 * Lifts an app's action into an action on the lifted store.
 */
export function liftAction(action) {
    return new Actions.PerformAction(action, +Date.now());
}
/**
 * Sanitizes given actions with given function.
 */
export function sanitizeActions(actionSanitizer, actions) {
    return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {
        const idx = Number(actionIdx);
        sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);
        return sanitizedActions;
    }, {});
}
/**
 * Sanitizes given action with given function.
 */
export function sanitizeAction(actionSanitizer, action, actionIdx) {
    return {
        ...action,
        action: actionSanitizer(action.action, actionIdx),
    };
}
/**
 * Sanitizes given states with given function.
 */
export function sanitizeStates(stateSanitizer, states) {
    return states.map((computedState, idx) => ({
        state: sanitizeState(stateSanitizer, computedState.state, idx),
        error: computedState.error,
    }));
}
/**
 * Sanitizes given state with given function.
 */
export function sanitizeState(stateSanitizer, state, stateIdx) {
    return stateSanitizer(state, stateIdx);
}
/**
 * Read the config and tell if actions should be filtered
 */
export function shouldFilterActions(config) {
    return config.predicate || config.actionsSafelist || config.actionsBlocklist;
}
/**
 * Return a full filtered lifted state
 */
export function filterLiftedState(liftedState, predicate, safelist, blocklist) {
    const filteredStagedActionIds = [];
    const filteredActionsById = {};
    const filteredComputedStates = [];
    liftedState.stagedActionIds.forEach((id, idx) => {
        const liftedAction = liftedState.actionsById[id];
        if (!liftedAction)
            return;
        if (idx &&
            isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, safelist, blocklist)) {
            return;
        }
        filteredActionsById[id] = liftedAction;
        filteredStagedActionIds.push(id);
        filteredComputedStates.push(liftedState.computedStates[idx]);
    });
    return {
        ...liftedState,
        stagedActionIds: filteredStagedActionIds,
        actionsById: filteredActionsById,
        computedStates: filteredComputedStates,
    };
}
/**
 * Return true is the action should be ignored
 */
export function isActionFiltered(state, action, predicate, safelist, blockedlist) {
    const predicateMatch = predicate && !predicate(state, action.action);
    const safelistMatch = safelist &&
        !action.action.type.match(safelist.map((s) => escapeRegExp(s)).join('|'));
    const blocklistMatch = blockedlist &&
        action.action.type.match(blockedlist.map((s) => escapeRegExp(s)).join('|'));
    return predicateMatch || safelistMatch || blocklistMatch;
}
/**
 * Return string with escaped RegExp special characters
 * https://stackoverflow.com/a/6969486/1337347
 */
function escapeRegExp(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
//# sourceMappingURL=data:application/json;base64,