{"version":3,"file":"reducer.js","sourceRoot":"ng://@ngrx/store-devtools/","sources":["src/reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import { ErrorHandler } from '@angular/core';\nimport { Action, ActionReducer, UPDATE, INIT } from '@ngrx/store';\n\nimport { difference, liftAction, isActionFiltered } from './utils';\nimport * as DevtoolsActions from './actions';\nimport { StoreDevtoolsConfig } from './config';\nimport { PerformAction } from './actions';\n\nexport type InitAction = {\n  readonly type: typeof INIT;\n};\n\nexport type UpdateReducerAction = {\n  readonly type: typeof UPDATE;\n};\n\nexport type CoreActions = InitAction | UpdateReducerAction;\nexport type Actions = DevtoolsActions.All | CoreActions;\n\nexport const INIT_ACTION = { type: INIT };\n\nexport const RECOMPUTE = '@ngrx/store-devtools/recompute' as '@ngrx/store-devtools/recompute';\nexport const RECOMPUTE_ACTION = { type: RECOMPUTE };\n\nexport interface ComputedState {\n  state: any;\n  error: any;\n}\n\nexport interface LiftedAction {\n  type: string;\n  action: Action;\n}\n\nexport interface LiftedActions {\n  [id: number]: LiftedAction;\n}\n\nexport interface LiftedState {\n  monitorState: any;\n  nextActionId: number;\n  actionsById: LiftedActions;\n  stagedActionIds: number[];\n  skippedActionIds: number[];\n  committedState: any;\n  currentStateIndex: number;\n  computedStates: ComputedState[];\n  isLocked: boolean;\n  isPaused: boolean;\n}\n\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(\n  reducer: ActionReducer<any, any>,\n  action: Action,\n  state: any,\n  error: any,\n  errorHandler: ErrorHandler\n) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain',\n    };\n  }\n\n  let nextState = state;\n  let nextError;\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    errorHandler.handleError(err.stack || err);\n  }\n\n  return {\n    state: nextState,\n    error: nextError,\n  };\n}\n\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(\n  computedStates: ComputedState[],\n  minInvalidatedStateIndex: number,\n  reducer: ActionReducer<any, any>,\n  committedState: any,\n  actionsById: LiftedActions,\n  stagedActionIds: number[],\n  skippedActionIds: number[],\n  errorHandler: ErrorHandler,\n  isPaused: boolean\n) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (\n    minInvalidatedStateIndex >= computedStates.length &&\n    computedStates.length === stagedActionIds.length\n  ) {\n    return computedStates;\n  }\n\n  const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  // If the recording is paused, recompute all states up until the pause state,\n  // else recompute all states.\n  const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n  for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n    const actionId = stagedActionIds[i];\n    const action = actionsById[actionId].action;\n\n    const previousEntry = nextComputedStates[i - 1];\n    const previousState = previousEntry ? previousEntry.state : committedState;\n    const previousError = previousEntry ? previousEntry.error : undefined;\n\n    const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const entry: ComputedState = shouldSkip\n      ? previousEntry\n      : computeNextEntry(\n          reducer,\n          action,\n          previousState,\n          previousError,\n          errorHandler\n        );\n\n    nextComputedStates.push(entry);\n  }\n  // If the recording is paused, the last state will not be recomputed,\n  // because it's essentially not part of the state history.\n  if (isPaused) {\n    nextComputedStates.push(computedStates[computedStates.length - 1]);\n  }\n\n  return nextComputedStates;\n}\n\nexport function liftInitialState(\n  initialCommittedState?: any,\n  monitorReducer?: any\n): LiftedState {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: { 0: liftAction(INIT_ACTION) },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n    isLocked: false,\n    isPaused: false,\n  };\n}\n\n/**\n * Creates a history state reducer from an app's reducer.\n */\nexport function liftReducerWith(\n  initialCommittedState: any,\n  initialLiftedState: LiftedState,\n  errorHandler: ErrorHandler,\n  monitorReducer?: any,\n  options: Partial<StoreDevtoolsConfig> = {}\n) {\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return (\n    reducer: ActionReducer<any, any>\n  ): ActionReducer<LiftedState, Actions> => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused,\n    } =\n      liftedState || initialLiftedState;\n\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n\n    function commitExcessActions(n: number) {\n      // Auto-commits n-number of excess actions.\n      let excess = n;\n      let idsToDelete = stagedActionIds.slice(1, excess + 1);\n\n      for (let i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n\n      skippedActionIds = skippedActionIds.filter(\n        id => idsToDelete.indexOf(id) === -1\n      );\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex =\n        currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n\n    function commitChanges() {\n      // Consider the last committed state the new starting point.\n      // Squash any staged actions into a single committed state.\n      actionsById = { 0: liftAction(INIT_ACTION) };\n      nextActionId = 1;\n      stagedActionIds = [0];\n      skippedActionIds = [];\n      committedState = computedStates[currentStateIndex].state;\n      currentStateIndex = 0;\n      computedStates = [];\n    }\n\n    // By default, aggressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    let minInvalidatedStateIndex = 0;\n\n    switch (liftedAction.type) {\n      case DevtoolsActions.LOCK_CHANGES: {\n        isLocked = liftedAction.status;\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case DevtoolsActions.PAUSE_RECORDING: {\n        isPaused = liftedAction.status;\n        if (isPaused) {\n          // Add a pause action to signal the devtools-user the recording is paused.\n          // The corresponding state will be overwritten on each update to always contain\n          // the latest state (see Actions.PERFORM_ACTION).\n          stagedActionIds = [...stagedActionIds, nextActionId];\n          actionsById[nextActionId] = new PerformAction(\n            {\n              type: '@ngrx/devtools/pause',\n            },\n            +Date.now()\n          );\n          nextActionId++;\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n          computedStates = computedStates.concat(\n            computedStates[computedStates.length - 1]\n          );\n\n          if (currentStateIndex === stagedActionIds.length - 2) {\n            currentStateIndex++;\n          }\n          minInvalidatedStateIndex = Infinity;\n        } else {\n          commitChanges();\n        }\n        break;\n      }\n      case DevtoolsActions.RESET: {\n        // Get back to the state the store was created with.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = initialCommittedState;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case DevtoolsActions.COMMIT: {\n        commitChanges();\n        break;\n      }\n      case DevtoolsActions.ROLLBACK: {\n        // Forget about any staged actions.\n        // Start again from the last committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case DevtoolsActions.TOGGLE_ACTION: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { id: actionId } = liftedAction;\n        const index = skippedActionIds.indexOf(actionId);\n        if (index === -1) {\n          skippedActionIds = [actionId, ...skippedActionIds];\n        } else {\n          skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n        }\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n        break;\n      }\n      case DevtoolsActions.SET_ACTIONS_ACTIVE: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { start, end, active } = liftedAction;\n        const actionIds = [];\n        for (let i = start; i < end; i++) actionIds.push(i);\n        if (active) {\n          skippedActionIds = difference(skippedActionIds, actionIds);\n        } else {\n          skippedActionIds = [...skippedActionIds, ...actionIds];\n        }\n\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n        break;\n      }\n      case DevtoolsActions.JUMP_TO_STATE: {\n        // Without recomputing anything, move the pointer that tell us\n        // which state is considered the current one. Useful for sliders.\n        currentStateIndex = liftedAction.index;\n        // Optimization: we know the history has not changed.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case DevtoolsActions.JUMP_TO_ACTION: {\n        // Jumps to a corresponding state to a specific action.\n        // Useful when filtering actions.\n        const index = stagedActionIds.indexOf(liftedAction.actionId);\n        if (index !== -1) currentStateIndex = index;\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case DevtoolsActions.SWEEP: {\n        // Forget any actions that are currently being skipped.\n        stagedActionIds = difference(stagedActionIds, skippedActionIds);\n        skippedActionIds = [];\n        currentStateIndex = Math.min(\n          currentStateIndex,\n          stagedActionIds.length - 1\n        );\n        break;\n      }\n      case DevtoolsActions.PERFORM_ACTION: {\n        // Ignore action and return state as is if recording is locked\n        if (isLocked) {\n          return liftedState || initialLiftedState;\n        }\n\n        if (\n          isPaused ||\n          (liftedState &&\n            isActionFiltered(\n              liftedState.computedStates[currentStateIndex],\n              liftedAction,\n              options.predicate,\n              options.actionsSafelist,\n              options.actionsBlocklist\n            ))\n        ) {\n          // If recording is paused or if the action should be ignored, overwrite the last state\n          // (corresponds to the pause action) and keep everything else as is.\n          // This way, the app gets the new current state while the devtools\n          // do not record another action.\n          const lastState = computedStates[computedStates.length - 1];\n          computedStates = [\n            ...computedStates.slice(0, -1),\n            computeNextEntry(\n              reducer,\n              liftedAction.action,\n              lastState.state,\n              lastState.error,\n              errorHandler\n            ),\n          ];\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n\n        // Auto-commit as new actions come in.\n        if (options.maxAge && stagedActionIds.length === options.maxAge) {\n          commitExcessActions(1);\n        }\n\n        if (currentStateIndex === stagedActionIds.length - 1) {\n          currentStateIndex++;\n        }\n        const actionId = nextActionId++;\n        // Mutation! This is the hottest path, and we optimize on purpose.\n        // It is safe because we set a new key in a cache dictionary.\n        actionsById[actionId] = liftedAction;\n\n        stagedActionIds = [...stagedActionIds, actionId];\n        // Optimization: we know that only the new action needs computing.\n        minInvalidatedStateIndex = stagedActionIds.length - 1;\n        break;\n      }\n      case DevtoolsActions.IMPORT_STATE: {\n        // Completely replace everything.\n        ({\n          monitorState,\n          actionsById,\n          nextActionId,\n          stagedActionIds,\n          skippedActionIds,\n          committedState,\n          currentStateIndex,\n          computedStates,\n          isLocked,\n          // prettier-ignore\n          isPaused\n        } = liftedAction.nextLiftedState);\n        break;\n      }\n      case INIT: {\n        // Always recompute states on hot reload and init.\n        minInvalidatedStateIndex = 0;\n\n        if (options.maxAge && stagedActionIds.length > options.maxAge) {\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds,\n            errorHandler,\n            isPaused\n          );\n\n          commitExcessActions(stagedActionIds.length - options.maxAge);\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      case UPDATE: {\n        const stateHasErrors =\n          computedStates.filter(state => state.error).length > 0;\n\n        if (stateHasErrors) {\n          // Recompute all states\n          minInvalidatedStateIndex = 0;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(\n              computedStates,\n              minInvalidatedStateIndex,\n              reducer,\n              committedState,\n              actionsById,\n              stagedActionIds,\n              skippedActionIds,\n              errorHandler,\n              isPaused\n            );\n\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n        } else {\n          // If not paused/locked, add a new action to signal devtools-user\n          // that there was a reducer update.\n          if (!isPaused && !isLocked) {\n            if (currentStateIndex === stagedActionIds.length - 1) {\n              currentStateIndex++;\n            }\n\n            // Add a new action to only recompute state\n            const actionId = nextActionId++;\n            actionsById[actionId] = new PerformAction(\n              liftedAction,\n              +Date.now()\n            );\n            stagedActionIds = [...stagedActionIds, actionId];\n\n            minInvalidatedStateIndex = stagedActionIds.length - 1;\n\n            computedStates = recomputeStates(\n              computedStates,\n              minInvalidatedStateIndex,\n              reducer,\n              committedState,\n              actionsById,\n              stagedActionIds,\n              skippedActionIds,\n              errorHandler,\n              isPaused\n            );\n          }\n\n          // Recompute state history with latest reducer and update action\n          computedStates = computedStates.map(cmp => ({\n            ...cmp,\n            state: reducer(cmp.state, RECOMPUTE_ACTION),\n          }));\n\n          currentStateIndex = stagedActionIds.length - 1;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n          }\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      default: {\n        // If the action is not recognized, it's a monitor action.\n        // Optimization: a monitor action can't change history.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n    }\n\n    computedStates = recomputeStates(\n      computedStates,\n      minInvalidatedStateIndex,\n      reducer,\n      committedState,\n      actionsById,\n      stagedActionIds,\n      skippedActionIds,\n      errorHandler,\n      isPaused\n    );\n    monitorState = monitorReducer(monitorState, liftedAction);\n\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused,\n    };\n  };\n}\n"]}