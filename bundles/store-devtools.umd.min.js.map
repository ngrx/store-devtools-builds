{"version":3,"sources":["../../../modules/store-devtools/src/utils.ts","../../../modules/store-devtools/src/reducer.ts","../../../modules/store-devtools/src/instrument.ts","../../../modules/store-devtools/src/actions.ts","../../../modules/store-devtools/src/extension.ts","../../../modules/store-devtools/src/config.ts","../../../modules/store-devtools/src/devtools.ts"],"names":["difference","first","second","filter","item","indexOf","unliftState","liftedState","computedStates","currentStateIndex","state","liftAction","action","Actions.PerformAction","applyOperators","input$","operators","reduce","source$","_a","operator","args","slice","apply","computeNextEntry","reducer","error","nextError","nextState","err","toString","console","stack","recomputeStates","minInvalidatedStateIndex","committedState","actionsById","stagedActionIds","skippedActionIds","length","nextComputedStates","i","actionId","previousEntry","previousState","previousError","undefined","shouldSkip","entry","push","liftInitialState","initialCommittedState","monitorReducer","monitorState","nextActionId","0","INIT_ACTION","liftReducerWith","initialLiftedState","options","liftedAction","commitExcessActions","n","excess","idsToDelete","id","concat","Object","create","type","Actions.RESET","Actions.COMMIT","Actions.ROLLBACK","Actions.TOGGLE_ACTION","actionId_1","index","Actions.SET_ACTIONS_ACTIVE","start","end","active","actionIds","Actions.JUMP_TO_STATE","Infinity","Actions.SWEEP","Math","min","Actions.PERFORM_ACTION","maxAge","Actions.IMPORT_STATE","_b","nextLiftedState","UPDATE","INIT","createIsExtensionOrMonitorPresent","extension","config","Boolean","monitor","noMonitor","createReduxDevtoolsExtension","window","createStateObservable","shouldInstrument","injector","get","StoreDevtools","State","createReducerManagerDispatcher","DevtoolsDispatcher","ActionsSubject","createConfig","_options","DEFAULT_OPTIONS","IS_EXTENSION_OR_MONITOR_PRESENT","assign","Error","createShouldInstrument","PERFORM_ACTION","RESET","ROLLBACK","COMMIT","SWEEP","TOGGLE_ACTION","SET_ACTIONS_ACTIVE","JUMP_TO_STATE","IMPORT_STATE","PerformAction","timestamp","this","Reset","Rollback","Commit","Sweep","ToggleAction","JumpToState","ImportState","ExtensionActionTypes","START","DISPATCH","STOP","ACTION","REDUX_DEVTOOLS_EXTENSION","InjectionToken","DevtoolsExtension","devtoolsExtension","instanceId","Date","now","createActionStreams","prototype","notify","send","createChangesObservable","_this","Observable","subscriber","connection","connect","subscribe","change","next","unsubscribe","empty","changes$","share","call","start$","stop$","liftedActions$","map","unwrapAction","payload","actions$","actionsUntilStop$","takeUntil","liftedUntilStop$","switchMap","eval","decorators","Injectable","ctorParameters","Inject","STORE_DEVTOOLS_CONFIG","INITIAL_OPTIONS","SHOULD_INSTRUMENT","_super","__extends","dispatcher","reducers$","scannedActions","initialState","liftedInitialState","liftReducer","liftedAction$","asObservable","skip","merge","observeOn","queue","liftedReducer$","liftedStateSubject","ReplaySubject","liftedStateSubscription","withLatestFrom","scan","unlifedAction","liftedState$","state$","stateSubscription","dispatch","complete","performAction","reset","Actions.Reset","rollback","Actions.Rollback","commit","Actions.Commit","sweep","Actions.Sweep","toggleAction","Actions.ToggleAction","jumpToState","Actions.JumpToState","importState","Actions.ImportState","ReducerObservable","ScannedActionsSubject","INITIAL_STATE","StoreDevtoolsModule","instrument","ngModule","providers","provide","useValue","deps","useFactory","Injector","StateObservable","ReducerManagerDispatcher","NgModule","imports","StoreModule"],"mappings":"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","file":"./dist/store-devtools/bundles/store-devtools.umd.min.js","sourcesContent":["import { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { LiftedState } from './reducer';\nimport * as Actions from './actions';\n/**\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\nexport function difference(first: any[], second: any[]) {\n  return first.filter(item => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n * @param {?} liftedState\n * @return {?}\n */\nexport function unliftState(liftedState: LiftedState) {\n  const { computedStates, currentStateIndex } = liftedState;\n  const { state } = computedStates[currentStateIndex];\n\n  return state;\n}\n/**\n * @param {?} liftedState\n * @return {?}\n */\nexport function unliftAction(liftedState: LiftedState) {\n  return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n * @param {?} action\n * @return {?}\n */\nexport function liftAction(action: Action) {\n  return new Actions.PerformAction(action);\n}\n/**\n * @param {?} input$\n * @param {?} operators\n * @return {?}\n */\nexport function applyOperators(input$: Observable<any>, operators: any[][]): Observable<any> {\n  return operators.reduce((source$, [ operator, ...args ]) => {\n    return operator.apply(source$, args);\n  }, input$);\n}","import { Action, ActionReducer, ActionsSubject, ReducerManager, UPDATE, INIT } from '@ngrx/store';\n\nimport { difference, liftAction } from './utils';\nimport * as Actions from './actions';\n\n\nexport type InitAction = {\n  readonly type: typeof INIT;\n}\n\nexport type UpdateReducerAction = {\n  readonly type: typeof UPDATE;\n}\n\nexport type CoreActions = InitAction | UpdateReducerAction;\nexport type Actions = Actions.All | CoreActions;\n\nexport const /** @type {?} */ INIT_ACTION = { type: INIT };\n\nexport interface LiftedState {\n  monitorState: any;\n  nextActionId: number;\n  actionsById: { [id: number]: { action: Action } };\n  stagedActionIds: number[];\n  skippedActionIds: number[];\n  committedState: any;\n  currentStateIndex: number;\n  computedStates: { state: any, error: any }[];\n}\n/**\n * Computes the next entry in the log by applying an action.\n * @param {?} reducer\n * @param {?} action\n * @param {?} state\n * @param {?} error\n * @return {?}\n */\nfunction computeNextEntry(\n  reducer: ActionReducer<any, any>,\n  action: Action,\n  state: LiftedState,\n  error: any\n) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain'\n    };\n  }\n\n  let /** @type {?} */ nextState = state;\n  let /** @type {?} */ nextError;\n  try {\n    nextState = reducer(state, action);\n  } catch ( /** @type {?} */err) {\n    nextError = err.toString();\n    console.error(err.stack || err);\n  }\n\n  return {\n    state: nextState,\n    error: nextError\n  };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n * @param {?} computedStates\n * @param {?} minInvalidatedStateIndex\n * @param {?} reducer\n * @param {?} committedState\n * @param {?} actionsById\n * @param {?} stagedActionIds\n * @param {?} skippedActionIds\n * @return {?}\n */\nfunction recomputeStates(\n  computedStates: { state: any, error: any }[],\n  minInvalidatedStateIndex: number,\n  reducer: ActionReducer<any, any>,\n  committedState: any,\n  actionsById: { [id: number]: { action: Action } },\n  stagedActionIds: number[],\n  skippedActionIds: number[]\n) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (\n    minInvalidatedStateIndex >= computedStates.length &&\n    computedStates.length === stagedActionIds.length\n  ) {\n    return computedStates;\n  }\n\n  const /** @type {?} */ nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  for (let /** @type {?} */ i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {\n    const /** @type {?} */ actionId = stagedActionIds[i];\n    const /** @type {?} */ action = actionsById[actionId].action;\n\n    const /** @type {?} */ previousEntry = nextComputedStates[i - 1];\n    const /** @type {?} */ previousState = previousEntry ? previousEntry.state : committedState;\n    const /** @type {?} */ previousError = previousEntry ? previousEntry.error : undefined;\n\n    const /** @type {?} */ shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const /** @type {?} */ entry = shouldSkip ?\n      previousEntry :\n      computeNextEntry(reducer, action, previousState, previousError);\n\n    nextComputedStates.push(entry);\n  }\n\n  return nextComputedStates;\n}\n/**\n * @param {?=} initialCommittedState\n * @param {?=} monitorReducer\n * @return {?}\n */\nexport function liftInitialState(initialCommittedState?: any, monitorReducer?: any): LiftedState {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: { 0: liftAction(INIT_ACTION) },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: []\n  };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n * @param {?} initialCommittedState\n * @param {?} initialLiftedState\n * @param {?=} monitorReducer\n * @param {?=} options\n * @return {?}\n */\nexport function liftReducerWith(\n  initialCommittedState: any,\n  initialLiftedState: LiftedState,\n  monitorReducer?: any,\n  options: { maxAge?: number } = {}\n) {\n  /**\n  * Manages how the history actions modify the history state.\n  */\n  return (reducer: ActionReducer<any, any>): ActionReducer<LiftedState, Actions> => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates\n    } = liftedState || initialLiftedState;\n\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n/**\n * @param {?} n\n * @return {?}\n */\nfunction commitExcessActions(n: number) {\n      // Auto-commits n-number of excess actions.\n      let /** @type {?} */ excess = n;\n      let /** @type {?} */ idsToDelete = stagedActionIds.slice(1, excess + 1);\n\n      for (let /** @type {?} */ i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n\n      skippedActionIds = skippedActionIds.filter(id => idsToDelete.indexOf(id) === -1);\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex = currentStateIndex > excess\n        ? currentStateIndex - excess\n        : 0;\n    }\n\n    // By default, agressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    let /** @type {?} */ minInvalidatedStateIndex = 0;\n\n    switch (liftedAction.type) {\n      case Actions.RESET: {\n        // Get back to the state the store was created with.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = initialCommittedState;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.COMMIT: {\n        // Consider the last committed state the new starting point.\n        // Squash any staged actions into a single committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = computedStates[currentStateIndex].state;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.ROLLBACK: {\n        // Forget about any staged actions.\n        // Start again from the last committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.TOGGLE_ACTION: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { id: actionId } = liftedAction;\n        const /** @type {?} */ index = skippedActionIds.indexOf(actionId);\n        if (index === -1) {\n          skippedActionIds = [actionId, ...skippedActionIds];\n        } else {\n          skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n        }\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n        break;\n      }\n      case Actions.SET_ACTIONS_ACTIVE: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { start, end, active } = liftedAction;\n        const /** @type {?} */ actionIds = [];\n        for (let /** @type {?} */ i = start; i < end; i++) actionIds.push(i);\n        if (active) {\n          skippedActionIds = difference(skippedActionIds, actionIds);\n        } else {\n          skippedActionIds = [...skippedActionIds, ...actionIds];\n        }\n\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n        break;\n      }\n      case Actions.JUMP_TO_STATE: {\n        // Without recomputing anything, move the pointer that tell us\n        // which state is considered the current one. Useful for sliders.\n        currentStateIndex = liftedAction.index;\n        // Optimization: we know the history has not changed.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case Actions.SWEEP: {\n        // Forget any actions that are currently being skipped.\n        stagedActionIds = difference(stagedActionIds, skippedActionIds);\n        skippedActionIds = [];\n        currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n        break;\n      }\n      case Actions.PERFORM_ACTION: {\n        // Auto-commit as new actions come in.\n        if (options.maxAge && stagedActionIds.length === options.maxAge) {\n          commitExcessActions(1);\n        }\n\n        if (currentStateIndex === stagedActionIds.length - 1) {\n          currentStateIndex++;\n        }\n        const /** @type {?} */ actionId = nextActionId++;\n        // Mutation! This is the hottest path, and we optimize on purpose.\n        // It is safe because we set a new key in a cache dictionary.\n        actionsById[actionId] = liftedAction;\n        stagedActionIds = [...stagedActionIds, actionId];\n        // Optimization: we know that only the new action needs computing.\n        minInvalidatedStateIndex = stagedActionIds.length - 1;\n        break;\n      }\n      case Actions.IMPORT_STATE: {\n        // Completely replace everything.\n        ({\n          monitorState,\n          actionsById,\n          nextActionId,\n          stagedActionIds,\n          skippedActionIds,\n          committedState,\n          currentStateIndex,\n          computedStates\n        } = liftedAction.nextLiftedState);\n        break;\n      }\n      case UPDATE:\n      case INIT: {\n        // Always recompute states on hot reload and init.\n        minInvalidatedStateIndex = 0;\n\n        if (options.maxAge && stagedActionIds.length > options.maxAge) {\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds\n          );\n\n          commitExcessActions(stagedActionIds.length - options.maxAge);\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      default: {\n        // If the action is not recognized, it's a monitor action.\n        // Optimization: a monitor action can't change history.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n    }\n\n    computedStates = recomputeStates(\n      computedStates,\n      minInvalidatedStateIndex,\n      reducer,\n      committedState,\n      actionsById,\n      stagedActionIds,\n      skippedActionIds\n    );\n    monitorState = monitorReducer(monitorState, liftedAction);\n\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates\n    };\n  };\n}\n","import { NgModule, InjectionToken, Injector, ModuleWithProviders } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport {\n  StoreModule,\n  State,\n  StateObservable,\n  ActionsSubject,\n  ScannedActionsSubject,\n  ReducerObservable,\n  ReducerManagerDispatcher,\n  ActionReducerMap,\n  ActionReducerFactory,\n  INITIAL_STATE,\n  INITIAL_REDUCERS,\n  REDUCER_FACTORY } from '@ngrx/store';\nimport { StoreDevtools, DevtoolsDispatcher } from './devtools';\nimport { StoreDevtoolsConfig, StoreDevtoolsOptions, STORE_DEVTOOLS_CONFIG, INITIAL_OPTIONS, SHOULD_INSTRUMENT } from './config';\nimport { DevtoolsExtension, REDUX_DEVTOOLS_EXTENSION, ReduxDevtoolsExtension } from './extension';\n\n\nexport const /** @type {?} */ IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken<boolean>(\n  'Is Devtools Extension or Monitor Present'\n);\n/**\n * @param {?} extension\n * @param {?} config\n * @return {?}\n */\nexport function createIsExtensionOrMonitorPresent(\n  extension: ReduxDevtoolsExtension | null,\n  config: StoreDevtoolsConfig\n) {\n  return Boolean(extension) || config.monitor !== noMonitor;\n}\n/**\n * @return {?}\n */\nexport function createReduxDevtoolsExtension() {\n  const /** @type {?} */ extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n\n  if (typeof window === 'object' && typeof ( /** @type {?} */((window as any)))[extensionKey] !== 'undefined') {\n    return ( /** @type {?} */((window as any)))[extensionKey];\n  }\n  else {\n    return null;\n  }\n}\n/**\n * @param {?} shouldInstrument\n * @param {?} injector\n * @return {?}\n */\nexport function createStateObservable(shouldInstrument: boolean, injector: Injector) {\n  return shouldInstrument ? injector.get(StoreDevtools).state : injector.get(State);\n}\n/**\n * @param {?} shouldInstrument\n * @param {?} injector\n * @return {?}\n */\nexport function createReducerManagerDispatcher(shouldInstrument: boolean, injector: Injector) {\n  return shouldInstrument ? injector.get(DevtoolsDispatcher) : injector.get(ActionsSubject);\n}\n/**\n * @return {?}\n */\nexport function noMonitor(): null {\n  return null;\n}\n/**\n * @param {?} _options\n * @return {?}\n */\nexport function createConfig(_options: StoreDevtoolsOptions): StoreDevtoolsConfig {\n  const /** @type {?} */ DEFAULT_OPTIONS: StoreDevtoolsConfig = {\n    maxAge: false,\n    monitor: noMonitor,\n    shouldInstrument: IS_EXTENSION_OR_MONITOR_PRESENT,\n  };\n\n  let /** @type {?} */ options = typeof _options === 'function' ? _options() : _options;\n  const /** @type {?} */ config = Object.assign({}, DEFAULT_OPTIONS, options);\n\n  if (config.maxAge && config.maxAge < 2) {\n    throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n  }\n\n  return config;\n}\n/**\n * @param {?} injector\n * @param {?} config\n * @return {?}\n */\nexport function createShouldInstrument(injector: Injector, config: StoreDevtoolsConfig) {\n  return injector.get(config.shouldInstrument);\n}\nexport class StoreDevtoolsModule {\n/**\n * @param {?=} options\n * @return {?}\n */\nstatic instrument(options: StoreDevtoolsOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: StoreDevtoolsModule,\n      providers: [\n        {\n          provide: INITIAL_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n          deps: [ REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG ],\n          useFactory: createIsExtensionOrMonitorPresent\n        },\n        {\n          provide: REDUX_DEVTOOLS_EXTENSION,\n          useFactory: createReduxDevtoolsExtension\n        },\n        {\n          provide: SHOULD_INSTRUMENT,\n          deps: [ Injector, STORE_DEVTOOLS_CONFIG ],\n          useFactory: createShouldInstrument\n        },\n        {\n          provide: STORE_DEVTOOLS_CONFIG,\n          deps: [ INITIAL_OPTIONS ],\n          useFactory: createConfig\n        },\n        {\n          provide: StateObservable,\n          deps: [ SHOULD_INSTRUMENT, Injector ],\n          useFactory: createStateObservable\n        },\n        {\n          provide: ReducerManagerDispatcher,\n          deps: [ SHOULD_INSTRUMENT, Injector ],\n          useFactory: createReducerManagerDispatcher\n        },\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    StoreModule\n  ],\n  providers: [\n    DevtoolsExtension,\n    DevtoolsDispatcher,\n    StoreDevtools,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StoreDevtoolsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreDevtoolsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreDevtoolsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Action } from '@ngrx/store';\n\n\nexport const /** @type {?} */ PERFORM_ACTION = 'PERFORM_ACTION';\nexport const /** @type {?} */ RESET = 'RESET';\nexport const /** @type {?} */ ROLLBACK = 'ROLLBACK';\nexport const /** @type {?} */ COMMIT = 'COMMIT';\nexport const /** @type {?} */ SWEEP = 'SWEEP';\nexport const /** @type {?} */ TOGGLE_ACTION = 'TOGGLE_ACTION';\nexport const /** @type {?} */ SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nexport const /** @type {?} */ JUMP_TO_STATE = 'JUMP_TO_STATE';\nexport const /** @type {?} */ IMPORT_STATE = 'IMPORT_STATE';\nexport class PerformAction implements Action {\n  readonly type = PERFORM_ACTION;\n/**\n * @param {?} action\n * @param {?=} timestamp\n */\nconstructor(\npublic action: Action,\npublic timestamp?: number,\n  ) {\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n        'Have you misspelled a constant?'\n      );\n    }\n  }\n}\n\nfunction PerformAction_tsickle_Closure_declarations() {\n/** @type {?} */\nPerformAction.prototype.type;\n/** @type {?} */\nPerformAction.prototype.action;\n/** @type {?} */\nPerformAction.prototype.timestamp;\n}\n\nexport class Reset implements Action {\n  readonly type = RESET;\n/**\n * @param {?=} timestamp\n */\nconstructor(public timestamp?: number) { }\n}\n\nfunction Reset_tsickle_Closure_declarations() {\n/** @type {?} */\nReset.prototype.type;\n/** @type {?} */\nReset.prototype.timestamp;\n}\n\nexport class Rollback implements Action {\n  readonly type = ROLLBACK;\n/**\n * @param {?=} timestamp\n */\nconstructor(public timestamp?: number) { }\n}\n\nfunction Rollback_tsickle_Closure_declarations() {\n/** @type {?} */\nRollback.prototype.type;\n/** @type {?} */\nRollback.prototype.timestamp;\n}\n\nexport class Commit implements Action {\n  readonly type = COMMIT;\n/**\n * @param {?=} timestamp\n */\nconstructor(public timestamp?: number) { }\n}\n\nfunction Commit_tsickle_Closure_declarations() {\n/** @type {?} */\nCommit.prototype.type;\n/** @type {?} */\nCommit.prototype.timestamp;\n}\n\nexport class Sweep implements Action {\n  readonly type = SWEEP;\n}\n\nfunction Sweep_tsickle_Closure_declarations() {\n/** @type {?} */\nSweep.prototype.type;\n}\n\nexport class ToggleAction implements Action {\n  readonly type = TOGGLE_ACTION;\n/**\n * @param {?} id\n */\nconstructor(public id: number) { }\n}\n\nfunction ToggleAction_tsickle_Closure_declarations() {\n/** @type {?} */\nToggleAction.prototype.type;\n/** @type {?} */\nToggleAction.prototype.id;\n}\n\nexport class SetActionsActive implements Action {\n  readonly type = SET_ACTIONS_ACTIVE;\n/**\n * @param {?} start\n * @param {?} end\n * @param {?=} active\n */\nconstructor(\npublic start: number,\npublic end: number,\npublic active: boolean = true,\n  ) { }\n}\n\nfunction SetActionsActive_tsickle_Closure_declarations() {\n/** @type {?} */\nSetActionsActive.prototype.type;\n/** @type {?} */\nSetActionsActive.prototype.start;\n/** @type {?} */\nSetActionsActive.prototype.end;\n/** @type {?} */\nSetActionsActive.prototype.active;\n}\n\nexport class JumpToState implements Action {\n  readonly type = JUMP_TO_STATE;\n/**\n * @param {?} index\n */\nconstructor(public index: number) { }\n}\n\nfunction JumpToState_tsickle_Closure_declarations() {\n/** @type {?} */\nJumpToState.prototype.type;\n/** @type {?} */\nJumpToState.prototype.index;\n}\n\nexport class ImportState implements Action {\n  readonly type = IMPORT_STATE;\n/**\n * @param {?} nextLiftedState\n */\nconstructor(public nextLiftedState: any) { }\n}\n\nfunction ImportState_tsickle_Closure_declarations() {\n/** @type {?} */\nImportState.prototype.type;\n/** @type {?} */\nImportState.prototype.nextLiftedState;\n}\n\n\n\nexport type All\n  = PerformAction\n  | Reset\n  | Rollback\n  | Commit\n  | Sweep\n  | ToggleAction\n  | SetActionsActive\n  | JumpToState\n  | ImportState\n  ;\n","import { InjectionToken, Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { empty } from 'rxjs/observable/empty';\nimport { filter } from 'rxjs/operator/filter';\nimport { map } from 'rxjs/operator/map';\nimport { share } from 'rxjs/operator/share';\nimport { switchMap } from 'rxjs/operator/switchMap';\nimport { takeUntil } from 'rxjs/operator/takeUntil';\nimport { Action } from '@ngrx/store';\nimport { LiftedState } from './reducer';\nimport { applyOperators } from './utils';\n\nexport const /** @type {?} */ ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION'\n};\n\nexport const /** @type {?} */ REDUX_DEVTOOLS_EXTENSION = new InjectionToken<ReduxDevtoolsExtension>('Redux Devtools Extension');\n\nexport interface ReduxDevtoolsExtensionConnection {\n  subscribe(listener: (change: any) => void): void;\n  unsubscribe(): void;\n  send(action: any, state: any): void;\n}\n\nexport interface ReduxDevtoolsExtension {\n  connect(options: { shouldStringify?: boolean, instanceId: string }): ReduxDevtoolsExtensionConnection;\n  send(action: any, state: any, shouldStringify?: boolean, instanceId?: string): void;\n}\nexport class DevtoolsExtension {\nprivate instanceId = `ngrx-store-${Date.now()}`;\nprivate devtoolsExtension: ReduxDevtoolsExtension;\n\n  liftedActions$: Observable<any>;\n  actions$: Observable<any>;\n/**\n * @param {?} devtoolsExtension\n */\nconstructor(\n     devtoolsExtension: ReduxDevtoolsExtension\n  ) {\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n/**\n * @param {?} action\n * @param {?} state\n * @return {?}\n */\nnotify(action: Action, state: LiftedState) {\n    if (!this.devtoolsExtension) {\n      return;\n    }\n\n    this.devtoolsExtension.send(null, state, false, this.instanceId);\n  }\n/**\n * @return {?}\n */\nprivate createChangesObservable(): Observable<any> {\n    if (!this.devtoolsExtension) {\n      return empty();\n    }\n\n    return new Observable(subscriber => {\n      const /** @type {?} */ connection = this.devtoolsExtension.connect({ instanceId: this.instanceId });\n\n      connection.subscribe((change: any) => subscriber.next(change));\n\n      return connection.unsubscribe;\n    });\n  }\n/**\n * @return {?}\n */\nprivate createActionStreams() {\n    // Listens to all changes based on our instanceId\n    const /** @type {?} */ changes$ = share.call(this.createChangesObservable());\n\n    // Listen for the start action\n    const /** @type {?} */ start$ = filter.call(changes$, (change: any) => change.type === ExtensionActionTypes.START);\n\n    // Listen for the stop action\n    const /** @type {?} */ stop$ = filter.call(changes$, (change: any) => change.type === ExtensionActionTypes.STOP);\n\n    // Listen for lifted actions\n    const /** @type {?} */ liftedActions$ = applyOperators(changes$, [\n      [ filter, (change: any) => change.type === ExtensionActionTypes.DISPATCH ],\n      [ map,  (change: any) => this.unwrapAction(change.payload) ]\n    ]);\n\n    // Listen for unlifted actions\n    const /** @type {?} */ actions$ = applyOperators(changes$, [\n      [ filter, (change: any) => change.type === ExtensionActionTypes.ACTION ],\n      [ map,  (change: any) => this.unwrapAction(change.payload) ]\n    ]);\n\n    const /** @type {?} */ actionsUntilStop$ = takeUntil.call(actions$, stop$);\n    const /** @type {?} */ liftedUntilStop$ = takeUntil.call(liftedActions$, stop$);\n\n    // Only take the action sources between the start/stop events\n    this.actions$ = switchMap.call(start$, () => actionsUntilStop$);\n    this.liftedActions$ = switchMap.call(start$, () => liftedUntilStop$);\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nprivate unwrapAction(action: Action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [REDUX_DEVTOOLS_EXTENSION, ] }, ]},\n];\n}\n\nfunction DevtoolsExtension_tsickle_Closure_declarations() {\n/** @type {?} */\nDevtoolsExtension.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDevtoolsExtension.ctorParameters;\n/** @type {?} */\nDevtoolsExtension.prototype.instanceId;\n/** @type {?} */\nDevtoolsExtension.prototype.devtoolsExtension;\n/** @type {?} */\nDevtoolsExtension.prototype.liftedActions$;\n/** @type {?} */\nDevtoolsExtension.prototype.actions$;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ActionReducer } from '@ngrx/store';\nimport { InjectionToken, Type } from '@angular/core';\n\n\nexport interface StoreDevtoolsConfig {\n  maxAge: number | false;\n  monitor: ActionReducer<any, any>;\n  shouldInstrument: Type<boolean> | InjectionToken<boolean>;\n}\n\nexport const /** @type {?} */ STORE_DEVTOOLS_CONFIG = new InjectionToken<StoreDevtoolsConfig>('@ngrx/devtools Options');\nexport const /** @type {?} */ INITIAL_OPTIONS = new InjectionToken<StoreDevtoolsConfig>('@ngrx/devtools Initial Config');\nexport const /** @type {?} */ SHOULD_INSTRUMENT = new InjectionToken<boolean>('@ngrx/devtools Should Instrument');\n\nexport type StoreDevtoolsOptions\n  = Partial<StoreDevtoolsConfig>\n  | (() => Partial<StoreDevtoolsConfig>)\n  ;\n","import { Injectable, Inject, OnDestroy } from '@angular/core';\nimport { State, Action, INITIAL_STATE, ReducerObservable, ActionsSubject, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Observer } from 'rxjs/Observer';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operator/map';\nimport { merge } from 'rxjs/operator/merge';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { scan } from 'rxjs/operator/scan';\nimport { skip } from 'rxjs/operator/skip';\nimport { withLatestFrom } from 'rxjs/operator/withLatestFrom';\nimport { queue } from 'rxjs/scheduler/queue';\n\nimport { DevtoolsExtension } from './extension';\nimport { liftAction, unliftAction, unliftState, applyOperators } from './utils';\nimport { liftReducerWith, liftInitialState, LiftedState } from './reducer';\nimport * as Actions from './actions';\nimport { StoreDevtoolsConfig, STORE_DEVTOOLS_CONFIG } from './config';\nexport class DevtoolsDispatcher extends ActionsSubject { static decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DevtoolsDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nDevtoolsDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDevtoolsDispatcher.ctorParameters;\n}\n\nexport class StoreDevtools implements Observer<any> {\nprivate stateSubscription: Subscription;\npublic dispatcher: ActionsSubject;\npublic liftedState: Observable<LiftedState>;\npublic state: Observable<any>;\n/**\n * @param {?} dispatcher\n * @param {?} actions$\n * @param {?} reducers$\n * @param {?} extension\n * @param {?} scannedActions\n * @param {?} initialState\n * @param {?} config\n */\nconstructor(\n    dispatcher: DevtoolsDispatcher,\n    actions$: ActionsSubject,\n    reducers$: ReducerObservable,\n    extension: DevtoolsExtension,\n    scannedActions: ScannedActionsSubject,\n     initialState: any,\n     config: StoreDevtoolsConfig\n  ) {\n    const liftedInitialState = liftInitialState(initialState, config.monitor);\n    const liftReducer = liftReducerWith(initialState, liftedInitialState, config.monitor,\n      config.maxAge ? { maxAge: config.maxAge } : { });\n\n    const liftedAction$ = applyOperators(actions$.asObservable(), [\n      [ skip, 1 ],\n      [ merge, extension.actions$ ],\n      [ map, liftAction ],\n      [ merge, dispatcher, extension.liftedActions$ ],\n      [ observeOn, queue ]\n    ]);\n\n    const liftedReducer$ = map.call(reducers$, liftReducer);\n\n    const liftedStateSubject = new ReplaySubject(1);\n    const liftedStateSubscription = applyOperators(liftedAction$, [\n      [ withLatestFrom, liftedReducer$ ],\n      [ scan, ({ state: liftedState }: any, [ action, reducer ]: any) => {\n        const state = reducer(liftedState, action);\n\n        extension.notify(action, state);\n\n        return { state, action };\n      }, { state: liftedInitialState, action: null }]\n    ]).subscribe(({ state, action }) => {\n      liftedStateSubject.next(state);\n\n      if (action.type === Actions.PERFORM_ACTION) {\n        const unlifedAction = (action as Actions.PerformAction).action;\n\n        scannedActions.next(unlifedAction);\n      }\n    });\n\n    const liftedState$ = liftedStateSubject.asObservable();\n    const state$ = map.call(liftedState$, unliftState);\n\n    this.stateSubscription = liftedStateSubscription;\n    this.dispatcher = dispatcher;\n    this.liftedState = liftedState$;\n    this.state = state$;\n  }\n/**\n * @param {?} action\n * @return {?}\n */\ndispatch(action: Action) {\n    this.dispatcher.next(action);\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nnext(action: any) {\n    this.dispatcher.next(action);\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nerror(error: any) { }\n/**\n * @return {?}\n */\ncomplete() { }\n/**\n * @param {?} action\n * @return {?}\n */\nperformAction(action: any) {\n    this.dispatch(new Actions.PerformAction(action));\n  }\n/**\n * @return {?}\n */\nreset() {\n    this.dispatch(new Actions.Reset());\n  }\n/**\n * @return {?}\n */\nrollback() {\n    this.dispatch(new Actions.Rollback());\n  }\n/**\n * @return {?}\n */\ncommit() {\n    this.dispatch(new Actions.Commit());\n  }\n/**\n * @return {?}\n */\nsweep() {\n    this.dispatch(new Actions.Sweep());\n  }\n/**\n * @param {?} id\n * @return {?}\n */\ntoggleAction(id: number) {\n    this.dispatch(new Actions.ToggleAction(id));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\njumpToState(index: number) {\n    this.dispatch(new Actions.JumpToState(index));\n  }\n/**\n * @param {?} nextLiftedState\n * @return {?}\n */\nimportState(nextLiftedState: any) {\n    this.dispatch(new Actions.ImportState(nextLiftedState));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DevtoolsDispatcher, },\n{type: ActionsSubject, },\n{type: ReducerObservable, },\n{type: DevtoolsExtension, },\n{type: ScannedActionsSubject, },\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [STORE_DEVTOOLS_CONFIG, ] }, ]},\n];\n}\n\nfunction StoreDevtools_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreDevtools.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreDevtools.ctorParameters;\n/** @type {?} */\nStoreDevtools.prototype.stateSubscription;\n/** @type {?} */\nStoreDevtools.prototype.dispatcher;\n/** @type {?} */\nStoreDevtools.prototype.liftedState;\n/** @type {?} */\nStoreDevtools.prototype.state;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}