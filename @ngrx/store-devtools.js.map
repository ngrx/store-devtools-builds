{"version":3,"file":"store-devtools.js","sources":["../../../modules/store-devtools/src/instrument.ts","../../../modules/store-devtools/src/devtools.ts","../../../modules/store-devtools/src/reducer.ts","../../../modules/store-devtools/src/extension.ts","../../../modules/store-devtools/src/utils.ts","../../../modules/store-devtools/src/actions.ts","../../../modules/store-devtools/src/config.ts"],"sourcesContent":["import {\n  NgModule,\n  InjectionToken,\n  Injector,\n  ModuleWithProviders,\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport {\n  StoreModule,\n  State,\n  StateObservable,\n  ActionsSubject,\n  ScannedActionsSubject,\n  ReducerObservable,\n  ReducerManagerDispatcher,\n  ActionReducerMap,\n  ActionReducerFactory,\n  INITIAL_STATE,\n  INITIAL_REDUCERS,\n  REDUCER_FACTORY,\n} from '@ngrx/store';\nimport { StoreDevtools, DevtoolsDispatcher } from './devtools';\nimport {\n  StoreDevtoolsConfig,\n  StoreDevtoolsOptions,\n  STORE_DEVTOOLS_CONFIG,\n  INITIAL_OPTIONS,\n} from './config';\nimport {\n  DevtoolsExtension,\n  REDUX_DEVTOOLS_EXTENSION,\n  ReduxDevtoolsExtension,\n} from './extension';\n\nexport const IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken<boolean>(\n  'Is Devtools Extension or Monitor Present'\n);\n\nexport function createIsExtensionOrMonitorPresent(\n  extension: ReduxDevtoolsExtension | null,\n  config: StoreDevtoolsConfig\n) {\n  return Boolean(extension) || config.monitor !== noMonitor;\n}\n\nexport function createReduxDevtoolsExtension() {\n  const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n\n  if (\n    typeof window === 'object' &&\n    typeof (window as any)[extensionKey] !== 'undefined'\n  ) {\n    return (window as any)[extensionKey];\n  } else {\n    return null;\n  }\n}\n\nexport function createStateObservable(devtools: StoreDevtools) {\n  return devtools.state;\n}\n\nexport function noMonitor(): null {\n  return null;\n}\n\nexport function noActionSanitizer(): null {\n  return null;\n}\n\nexport function noStateSanitizer(): null {\n  return null;\n}\n\nexport const DEFAULT_NAME = 'NgRx Store DevTools';\n\nexport function createConfig(\n  _options: StoreDevtoolsOptions\n): StoreDevtoolsConfig {\n  const DEFAULT_OPTIONS: StoreDevtoolsConfig = {\n    maxAge: false,\n    monitor: noMonitor,\n    actionSanitizer: noActionSanitizer,\n    stateSanitizer: noStateSanitizer,\n    name: DEFAULT_NAME,\n    serialize: false,\n    logOnly: false,\n    features: false,\n  };\n\n  let options = typeof _options === 'function' ? _options() : _options;\n  const logOnly = options.logOnly\n    ? { pause: true, export: true, test: true }\n    : false;\n  const features = options.features || logOnly;\n  const config = Object.assign({}, DEFAULT_OPTIONS, { features }, options);\n\n  if (config.maxAge && config.maxAge < 2) {\n    throw new Error(\n      `Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`\n    );\n  }\n\n  return config;\n}\n\n@NgModule({})\nexport class StoreDevtoolsModule {\n  static instrument(options: StoreDevtoolsOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: StoreDevtoolsModule,\n      providers: [\n        DevtoolsExtension,\n        DevtoolsDispatcher,\n        StoreDevtools,\n        {\n          provide: INITIAL_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n          deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n          useFactory: createIsExtensionOrMonitorPresent,\n        },\n        {\n          provide: REDUX_DEVTOOLS_EXTENSION,\n          useFactory: createReduxDevtoolsExtension,\n        },\n        {\n          provide: STORE_DEVTOOLS_CONFIG,\n          deps: [INITIAL_OPTIONS],\n          useFactory: createConfig,\n        },\n        {\n          provide: StateObservable,\n          deps: [StoreDevtools],\n          useFactory: createStateObservable,\n        },\n        {\n          provide: ReducerManagerDispatcher,\n          useExisting: DevtoolsDispatcher,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable, Inject, OnDestroy } from '@angular/core';\nimport {\n  State,\n  Action,\n  INITIAL_STATE,\n  ReducerObservable,\n  ActionsSubject,\n  ScannedActionsSubject,\n} from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Observer } from 'rxjs/Observer';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operator/map';\nimport { merge } from 'rxjs/operator/merge';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { scan } from 'rxjs/operator/scan';\nimport { skip } from 'rxjs/operator/skip';\nimport { withLatestFrom } from 'rxjs/operator/withLatestFrom';\nimport { queue } from 'rxjs/scheduler/queue';\n\nimport { DevtoolsExtension } from './extension';\nimport { liftAction, unliftAction, unliftState, applyOperators } from './utils';\nimport { liftReducerWith, liftInitialState, LiftedState } from './reducer';\nimport * as Actions from './actions';\nimport { StoreDevtoolsConfig, STORE_DEVTOOLS_CONFIG } from './config';\n\n@Injectable()\nexport class DevtoolsDispatcher extends ActionsSubject {}\n\n@Injectable()\nexport class StoreDevtools implements Observer<any> {\n  private stateSubscription: Subscription;\n  public dispatcher: ActionsSubject;\n  public liftedState: Observable<LiftedState>;\n  public state: Observable<any>;\n\n  constructor(\n    dispatcher: DevtoolsDispatcher,\n    actions$: ActionsSubject,\n    reducers$: ReducerObservable,\n    extension: DevtoolsExtension,\n    scannedActions: ScannedActionsSubject,\n    @Inject(INITIAL_STATE) initialState: any,\n    @Inject(STORE_DEVTOOLS_CONFIG) config: StoreDevtoolsConfig\n  ) {\n    const liftedInitialState = liftInitialState(initialState, config.monitor);\n    const liftReducer = liftReducerWith(\n      initialState,\n      liftedInitialState,\n      config.monitor,\n      config\n    );\n\n    const liftedAction$ = applyOperators(actions$.asObservable(), [\n      [skip, 1],\n      [merge, extension.actions$],\n      [map, liftAction],\n      [merge, dispatcher, extension.liftedActions$],\n      [observeOn, queue],\n    ]);\n\n    const liftedReducer$ = map.call(reducers$, liftReducer);\n\n    const liftedStateSubject = new ReplaySubject<LiftedState>(1);\n    const liftedStateSubscription = applyOperators(liftedAction$, [\n      [withLatestFrom, liftedReducer$],\n      [\n        scan,\n        ({ state: liftedState }: any, [action, reducer]: any) => {\n          const state = reducer(liftedState, action);\n\n          extension.notify(action, state);\n\n          return { state, action };\n        },\n        { state: liftedInitialState, action: null },\n      ],\n    ]).subscribe(({ state, action }) => {\n      liftedStateSubject.next(state);\n\n      if (action.type === Actions.PERFORM_ACTION) {\n        const unliftedAction = (action as Actions.PerformAction).action;\n\n        scannedActions.next(unliftedAction);\n      }\n    });\n\n    const liftedState$ = liftedStateSubject.asObservable() as Observable<\n      LiftedState\n    >;\n    const state$ = map.call(liftedState$, unliftState);\n\n    this.stateSubscription = liftedStateSubscription;\n    this.dispatcher = dispatcher;\n    this.liftedState = liftedState$;\n    this.state = state$;\n  }\n\n  dispatch(action: Action) {\n    this.dispatcher.next(action);\n  }\n\n  next(action: any) {\n    this.dispatcher.next(action);\n  }\n\n  error(error: any) {}\n\n  complete() {}\n\n  performAction(action: any) {\n    this.dispatch(new Actions.PerformAction(action));\n  }\n\n  reset() {\n    this.dispatch(new Actions.Reset());\n  }\n\n  rollback() {\n    this.dispatch(new Actions.Rollback());\n  }\n\n  commit() {\n    this.dispatch(new Actions.Commit());\n  }\n\n  sweep() {\n    this.dispatch(new Actions.Sweep());\n  }\n\n  toggleAction(id: number) {\n    this.dispatch(new Actions.ToggleAction(id));\n  }\n\n  jumpToAction(actionId: number) {\n    this.dispatch(new Actions.JumpToAction(actionId));\n  }\n\n  jumpToState(index: number) {\n    this.dispatch(new Actions.JumpToState(index));\n  }\n\n  importState(nextLiftedState: any) {\n    this.dispatch(new Actions.ImportState(nextLiftedState));\n  }\n}\n","import {\n  Action,\n  ActionReducer,\n  ActionsSubject,\n  ReducerManager,\n  UPDATE,\n  INIT,\n} from '@ngrx/store';\nimport { difference, liftAction } from './utils';\nimport * as Actions from './actions';\nimport { StoreDevtoolsConfig } from './config';\nimport { PerformAction } from './actions';\n\nexport type InitAction = {\n  readonly type: typeof INIT;\n};\n\nexport type UpdateReducerAction = {\n  readonly type: typeof UPDATE;\n};\n\nexport type CoreActions = InitAction | UpdateReducerAction;\nexport type Actions = Actions.All | CoreActions;\n\nexport const INIT_ACTION = { type: INIT };\n\nexport interface LiftedState {\n  monitorState: any;\n  nextActionId: number;\n  actionsById: { [id: number]: { action: Action } };\n  stagedActionIds: number[];\n  skippedActionIds: number[];\n  committedState: any;\n  currentStateIndex: number;\n  computedStates: { state: any; error: any }[];\n}\n\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(\n  reducer: ActionReducer<any, any>,\n  action: Action,\n  state: LiftedState,\n  error: any\n) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain',\n    };\n  }\n\n  let nextState = state;\n  let nextError;\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    console.error(err.stack || err);\n  }\n\n  return {\n    state: nextState,\n    error: nextError,\n  };\n}\n\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(\n  computedStates: { state: any; error: any }[],\n  minInvalidatedStateIndex: number,\n  reducer: ActionReducer<any, any>,\n  committedState: any,\n  actionsById: { [id: number]: { action: Action } },\n  stagedActionIds: number[],\n  skippedActionIds: number[]\n) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (\n    minInvalidatedStateIndex >= computedStates.length &&\n    computedStates.length === stagedActionIds.length\n  ) {\n    return computedStates;\n  }\n\n  const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  for (let i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {\n    const actionId = stagedActionIds[i];\n    const action = actionsById[actionId].action;\n\n    const previousEntry = nextComputedStates[i - 1];\n    const previousState = previousEntry ? previousEntry.state : committedState;\n    const previousError = previousEntry ? previousEntry.error : undefined;\n\n    const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const entry = shouldSkip\n      ? previousEntry\n      : computeNextEntry(reducer, action, previousState, previousError);\n\n    nextComputedStates.push(entry);\n  }\n\n  return nextComputedStates;\n}\n\nexport function liftInitialState(\n  initialCommittedState?: any,\n  monitorReducer?: any\n): LiftedState {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: { 0: liftAction(INIT_ACTION) },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n  };\n}\n\n/**\n * Creates a history state reducer from an app's reducer.\n */\nexport function liftReducerWith(\n  initialCommittedState: any,\n  initialLiftedState: LiftedState,\n  monitorReducer?: any,\n  options: Partial<StoreDevtoolsConfig> = {}\n) {\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return (\n    reducer: ActionReducer<any, any>\n  ): ActionReducer<LiftedState, Actions> => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n    } =\n      liftedState || initialLiftedState;\n\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n\n    function commitExcessActions(n: number) {\n      // Auto-commits n-number of excess actions.\n      let excess = n;\n      let idsToDelete = stagedActionIds.slice(1, excess + 1);\n\n      for (let i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n\n      skippedActionIds = skippedActionIds.filter(\n        id => idsToDelete.indexOf(id) === -1\n      );\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex =\n        currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n\n    // By default, agressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    let minInvalidatedStateIndex = 0;\n\n    switch (liftedAction.type) {\n      case Actions.RESET: {\n        // Get back to the state the store was created with.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = initialCommittedState;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.COMMIT: {\n        // Consider the last committed state the new starting point.\n        // Squash any staged actions into a single committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        committedState = computedStates[currentStateIndex].state;\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.ROLLBACK: {\n        // Forget about any staged actions.\n        // Start again from the last committed state.\n        actionsById = { 0: liftAction(INIT_ACTION) };\n        nextActionId = 1;\n        stagedActionIds = [0];\n        skippedActionIds = [];\n        currentStateIndex = 0;\n        computedStates = [];\n        break;\n      }\n      case Actions.TOGGLE_ACTION: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { id: actionId } = liftedAction;\n        const index = skippedActionIds.indexOf(actionId);\n        if (index === -1) {\n          skippedActionIds = [actionId, ...skippedActionIds];\n        } else {\n          skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n        }\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n        break;\n      }\n      case Actions.SET_ACTIONS_ACTIVE: {\n        // Toggle whether an action with given ID is skipped.\n        // Being skipped means it is a no-op during the computation.\n        const { start, end, active } = liftedAction;\n        const actionIds = [];\n        for (let i = start; i < end; i++) actionIds.push(i);\n        if (active) {\n          skippedActionIds = difference(skippedActionIds, actionIds);\n        } else {\n          skippedActionIds = [...skippedActionIds, ...actionIds];\n        }\n\n        // Optimization: we know history before this action hasn't changed\n        minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n        break;\n      }\n      case Actions.JUMP_TO_STATE: {\n        // Without recomputing anything, move the pointer that tell us\n        // which state is considered the current one. Useful for sliders.\n        currentStateIndex = liftedAction.index;\n        // Optimization: we know the history has not changed.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case Actions.JUMP_TO_ACTION: {\n        // Jumps to a corresponding state to a specific action.\n        // Useful when filtering actions.\n        const index = stagedActionIds.indexOf(liftedAction.actionId);\n        if (index !== -1) currentStateIndex = index;\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n      case Actions.SWEEP: {\n        // Forget any actions that are currently being skipped.\n        stagedActionIds = difference(stagedActionIds, skippedActionIds);\n        skippedActionIds = [];\n        currentStateIndex = Math.min(\n          currentStateIndex,\n          stagedActionIds.length - 1\n        );\n        break;\n      }\n      case Actions.PERFORM_ACTION: {\n        // Auto-commit as new actions come in.\n        if (options.maxAge && stagedActionIds.length === options.maxAge) {\n          commitExcessActions(1);\n        }\n\n        if (currentStateIndex === stagedActionIds.length - 1) {\n          currentStateIndex++;\n        }\n        const actionId = nextActionId++;\n        // Mutation! This is the hottest path, and we optimize on purpose.\n        // It is safe because we set a new key in a cache dictionary.\n        actionsById[actionId] = liftedAction;\n        stagedActionIds = [...stagedActionIds, actionId];\n        // Optimization: we know that only the new action needs computing.\n        minInvalidatedStateIndex = stagedActionIds.length - 1;\n        break;\n      }\n      case Actions.IMPORT_STATE: {\n        // Completely replace everything.\n        ({\n          monitorState,\n          actionsById,\n          nextActionId,\n          stagedActionIds,\n          skippedActionIds,\n          committedState,\n          currentStateIndex,\n          computedStates,\n        } = liftedAction.nextLiftedState);\n        break;\n      }\n      case INIT: {\n        // Always recompute states on hot reload and init.\n        minInvalidatedStateIndex = 0;\n\n        if (options.maxAge && stagedActionIds.length > options.maxAge) {\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds\n          );\n\n          commitExcessActions(stagedActionIds.length - options.maxAge);\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      case UPDATE: {\n        const stateHasErrors =\n          computedStates.filter(state => state.error).length > 0;\n\n        if (stateHasErrors) {\n          // Recompute all states\n          minInvalidatedStateIndex = 0;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(\n              computedStates,\n              minInvalidatedStateIndex,\n              reducer,\n              committedState,\n              actionsById,\n              stagedActionIds,\n              skippedActionIds\n            );\n\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n        } else {\n          if (currentStateIndex === stagedActionIds.length - 1) {\n            currentStateIndex++;\n          }\n\n          // Add a new action to only recompute state\n          const actionId = nextActionId++;\n          actionsById[actionId] = new PerformAction(liftedAction);\n          stagedActionIds = [...stagedActionIds, actionId];\n\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n\n          // States must be recomputed before committing excess.\n          computedStates = recomputeStates(\n            computedStates,\n            minInvalidatedStateIndex,\n            reducer,\n            committedState,\n            actionsById,\n            stagedActionIds,\n            skippedActionIds\n          );\n\n          currentStateIndex = minInvalidatedStateIndex;\n\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n          }\n\n          // Avoid double computation.\n          minInvalidatedStateIndex = Infinity;\n        }\n\n        break;\n      }\n      default: {\n        // If the action is not recognized, it's a monitor action.\n        // Optimization: a monitor action can't change history.\n        minInvalidatedStateIndex = Infinity;\n        break;\n      }\n    }\n\n    computedStates = recomputeStates(\n      computedStates,\n      minInvalidatedStateIndex,\n      reducer,\n      committedState,\n      actionsById,\n      stagedActionIds,\n      skippedActionIds\n    );\n    monitorState = monitorReducer(monitorState, liftedAction);\n\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n    };\n  };\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { empty } from 'rxjs/observable/empty';\nimport { filter } from 'rxjs/operator/filter';\nimport { map } from 'rxjs/operator/map';\nimport { share } from 'rxjs/operator/share';\nimport { switchMap } from 'rxjs/operator/switchMap';\nimport { takeUntil } from 'rxjs/operator/takeUntil';\n\nimport { STORE_DEVTOOLS_CONFIG, StoreDevtoolsConfig } from './config';\nimport { LiftedState } from './reducer';\nimport { applyOperators } from './utils';\n\nexport const ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION',\n};\n\nexport const REDUX_DEVTOOLS_EXTENSION = new InjectionToken<\n  ReduxDevtoolsExtension\n>('Redux Devtools Extension');\n\nexport interface ReduxDevtoolsExtensionConnection {\n  subscribe(listener: (change: any) => void): void;\n  unsubscribe(): void;\n  send(action: any, state: any): void;\n  init(state?: any): void;\n}\nexport interface ReduxDevtoolsExtensionConfig {\n  features?: object | boolean;\n  name: string | undefined;\n  instanceId: string;\n}\n\nexport interface ReduxDevtoolsExtension {\n  connect(\n    options: ReduxDevtoolsExtensionConfig\n  ): ReduxDevtoolsExtensionConnection;\n  send(\n    action: any,\n    state: any,\n    options: StoreDevtoolsConfig,\n    instanceId?: string\n  ): void;\n}\n\n@Injectable()\nexport class DevtoolsExtension {\n  private instanceId = `ngrx-store-${Date.now()}`;\n  private devtoolsExtension: ReduxDevtoolsExtension;\n\n  liftedActions$: Observable<any>;\n  actions$: Observable<any>;\n\n  constructor(\n    @Inject(REDUX_DEVTOOLS_EXTENSION) devtoolsExtension: ReduxDevtoolsExtension,\n    @Inject(STORE_DEVTOOLS_CONFIG) private config: StoreDevtoolsConfig\n  ) {\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n\n  notify(action: Action, state: LiftedState) {\n    if (!this.devtoolsExtension) {\n      return;\n    }\n\n    this.devtoolsExtension.send(null, state, this.config, this.instanceId);\n  }\n\n  private createChangesObservable(): Observable<any> {\n    if (!this.devtoolsExtension) {\n      return empty();\n    }\n\n    return new Observable(subscriber => {\n      const connection = this.devtoolsExtension.connect({\n        instanceId: this.instanceId,\n        name: this.config.name,\n        features: this.config.features,\n      });\n      connection.init();\n\n      connection.subscribe((change: any) => subscriber.next(change));\n\n      return connection.unsubscribe;\n    });\n  }\n\n  private createActionStreams() {\n    // Listens to all changes based on our instanceId\n    const changes$ = share.call(this.createChangesObservable());\n\n    // Listen for the start action\n    const start$ = filter.call(\n      changes$,\n      (change: any) => change.type === ExtensionActionTypes.START\n    );\n\n    // Listen for the stop action\n    const stop$ = filter.call(\n      changes$,\n      (change: any) => change.type === ExtensionActionTypes.STOP\n    );\n\n    // Listen for lifted actions\n    const liftedActions$ = applyOperators(changes$, [\n      [filter, (change: any) => change.type === ExtensionActionTypes.DISPATCH],\n      [map, (change: any) => this.unwrapAction(change.payload)],\n    ]);\n\n    // Listen for unlifted actions\n    const actions$ = applyOperators(changes$, [\n      [filter, (change: any) => change.type === ExtensionActionTypes.ACTION],\n      [map, (change: any) => this.unwrapAction(change.payload)],\n    ]);\n\n    const actionsUntilStop$ = takeUntil.call(actions$, stop$);\n    const liftedUntilStop$ = takeUntil.call(liftedActions$, stop$);\n\n    // Only take the action sources between the start/stop events\n    this.actions$ = switchMap.call(start$, () => actionsUntilStop$);\n    this.liftedActions$ = switchMap.call(start$, () => liftedUntilStop$);\n  }\n\n  private unwrapAction(action: Action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { LiftedState } from './reducer';\nimport * as Actions from './actions';\n\nexport function difference(first: any[], second: any[]) {\n  return first.filter(item => second.indexOf(item) < 0);\n}\n\n/**\n * Provides an app's view into the state of the lifted store.\n */\nexport function unliftState(liftedState: LiftedState) {\n  const { computedStates, currentStateIndex } = liftedState;\n  const { state } = computedStates[currentStateIndex];\n\n  return state;\n}\n\nexport function unliftAction(liftedState: LiftedState) {\n  return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nexport function liftAction(action: Action) {\n  return new Actions.PerformAction(action);\n}\n\nexport function applyOperators(\n  input$: Observable<any>,\n  operators: any[][]\n): Observable<any> {\n  return operators.reduce((source$, [operator, ...args]) => {\n    return operator.apply(source$, args);\n  }, input$);\n}\n","import { Action } from '@ngrx/store';\n\nexport const PERFORM_ACTION = 'PERFORM_ACTION';\nexport const RESET = 'RESET';\nexport const ROLLBACK = 'ROLLBACK';\nexport const COMMIT = 'COMMIT';\nexport const SWEEP = 'SWEEP';\nexport const TOGGLE_ACTION = 'TOGGLE_ACTION';\nexport const SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nexport const JUMP_TO_STATE = 'JUMP_TO_STATE';\nexport const JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nexport const IMPORT_STATE = 'IMPORT_STATE';\n\nexport class PerformAction implements Action {\n  readonly type = PERFORM_ACTION;\n\n  constructor(public action: Action, public timestamp?: number) {\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. ' +\n          'Have you misspelled a constant?'\n      );\n    }\n  }\n}\n\nexport class Reset implements Action {\n  readonly type = RESET;\n\n  constructor(public timestamp?: number) {}\n}\n\nexport class Rollback implements Action {\n  readonly type = ROLLBACK;\n\n  constructor(public timestamp?: number) {}\n}\n\nexport class Commit implements Action {\n  readonly type = COMMIT;\n\n  constructor(public timestamp?: number) {}\n}\n\nexport class Sweep implements Action {\n  readonly type = SWEEP;\n}\n\nexport class ToggleAction implements Action {\n  readonly type = TOGGLE_ACTION;\n\n  constructor(public id: number) {}\n}\n\nexport class SetActionsActive implements Action {\n  readonly type = SET_ACTIONS_ACTIVE;\n\n  constructor(\n    public start: number,\n    public end: number,\n    public active: boolean = true\n  ) {}\n}\n\nexport class JumpToState implements Action {\n  readonly type = JUMP_TO_STATE;\n\n  constructor(public index: number) {}\n}\n\nexport class JumpToAction implements Action {\n  readonly type = JUMP_TO_ACTION;\n\n  constructor(public actionId: number) {}\n}\n\nexport class ImportState implements Action {\n  readonly type = IMPORT_STATE;\n\n  constructor(public nextLiftedState: any) {}\n}\n\nexport type All =\n  | PerformAction\n  | Reset\n  | Rollback\n  | Commit\n  | Sweep\n  | ToggleAction\n  | SetActionsActive\n  | JumpToState\n  | JumpToAction\n  | ImportState;\n","import { ActionReducer, Action } from '@ngrx/store';\nimport { InjectionToken, Type } from '@angular/core';\n\nexport class StoreDevtoolsConfig {\n  maxAge: number | false;\n  monitor: ActionReducer<any, any>;\n  actionSanitizer?: <A extends Action>(action: A, id: number) => A;\n  stateSanitizer?: <S>(state: S, index: number) => S;\n  name?: string;\n  serialize?: boolean;\n  logOnly?: boolean;\n  features?: any;\n}\n\nexport const STORE_DEVTOOLS_CONFIG = new InjectionToken<StoreDevtoolsConfig>(\n  '@ngrx/devtools Options'\n);\nexport const INITIAL_OPTIONS = new InjectionToken<StoreDevtoolsConfig>(\n  '@ngrx/devtools Initial Config'\n);\n\nexport type StoreDevtoolsOptions =\n  | Partial<StoreDevtoolsConfig>\n  | (() => Partial<StoreDevtoolsConfig>);\n"],"names":["Actions.ImportState","Actions.JumpToState","Actions.JumpToAction","Actions.ToggleAction","Actions.Sweep","Actions.Commit","Actions.Rollback","Actions.Reset","Actions.PerformAction","map","Actions.PERFORM_ACTION","scan","withLatestFrom","ReplaySubject","observeOn","queue","merge","skip","Actions.IMPORT_STATE","Actions.SWEEP","Actions.JUMP_TO_ACTION","Actions.JUMP_TO_STATE","Actions.SET_ACTIONS_ACTIVE","Actions.TOGGLE_ACTION","Actions.ROLLBACK","Actions.COMMIT","Actions.RESET","switchMap","takeUntil","filter","share","Observable","empty"],"mappings":"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"}